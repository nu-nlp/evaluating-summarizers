from optimization_based.summarizers.base import AbstractSummarizer
from occams.nlp import DocumentProcessor, NltkTokenizer, TermOrder
from occams.summarize import (
    SummaryUnits,
    TermFrequencyScheme,
    TermFrequencySummaryExtractor,
    extract_summary,
)

class OccamsSummarizer(AbstractSummarizer):
    def __init__(self):
        super().__init__()
        self.model_name = "Occams"

    def occams_summarize(self,
                         text: str,
                         target_length: int) -> str:
        """

        Args:
            text (str): Input text to summarize.
            target_length (int): Summary length as number of words.

        Returns:
            summary (str): Summary of input text.

        """

        # Process the documents
        docparser = DocumentProcessor(TermOrder.BIGRAMS, language='english', download=True).process
        document = docparser(text)

        # POSITIONAL_DENSE is a more robust form of POSITIONAL_DENSE. For documents with a clean lead sentence POSITIONAL_FIRST
        # is fine and can outperform POSITIONAL_DENSE
        # scheme=TermFrequencyScheme.POSITIONAL_FIRST
        scheme = TermFrequencyScheme.POSITIONAL_DENSE
        extract = extract_summary(documents=[document], budget=target_length, units=SummaryUnits.WORDS, scheme=scheme)

        # Print some summaries that were generated by OCCAMS
        return extract.summary()


    def get_summary(self, text: str, length: int) -> str:
        """Summarizes the input text.
        Args:
            text (str): Input text to summarize.
            length (int): Summary length as number of words.
        Returns:
            summary (str): Summary of input text.
        """
        summary = self.occams_summarize(text, target_length=length)

        return summary.strip()
